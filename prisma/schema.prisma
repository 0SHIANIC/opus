generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  likedBy     String[]
  comments    Comment[]
  tags        Tag[]     @relation("PostTags")
  imageId     String?

  @@index([name])
}

model Comment {
  id          Int      @id @default(autoincrement())
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  displayName   String?
  interests     String[]
  themePreset   String?
  followers     Follow[] @relation("Followers")
  following     Follow[] @relation("Following")
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  comments      Comment[]
  tags          Tag[]
  assignedtasks Task[]    @relation("TaskAssigned")
  ownTasks      Task[]    @relation("TaskOwn")
}

model Follow {
  id          String  @id @default(uuid())
  followerId  String
  followingId String

  follower    User    @relation("Followers", fields: [followerId], references: [id])
  following   User    @relation("Following", fields: [followingId], references: [id])
}

model Task {
  id          Int      @id @default(autoincrement())
  type        String
  name        String
  icon        String
  interests   String[]
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  friends     User[]   @relation("TaskAssigned")
  userId      String
  user        User     @relation("TaskOwn" ,fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String
  colour     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts     Post[]   @relation("PostTags")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
